<?php

/**
 * This is the model base class for the table "employees".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Employees".
 *
 * Columns in table "employees" available as properties of the model,
 * followed by relations of table "employees" available as properties of the model.
 *
 * @property string $id
 * @property string $first_name
 * @property string $last_name
 * @property string $email
 * @property string $phone_office
 * @property string $phone_office_ext
 * @property string $phone_home
 * @property string $phone_mobile
 * @property string $fax
 * @property string $position
 * @property integer $current_position
 * @property integer $archived_position
 * @property string $skype
 * @property string $personal_note
 * @property string $office_id
 * @property string $firm_id
 *
 * @property Office $office
 * @property Employeescontinent[] $employeescontinents
 * @property Employeesregion[] $employeesregions
 * @property Employeessector[] $employeessectors
 */
abstract class BaseEmployees extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'employees';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Employees|Employees', $n);
	}

	public static function representingColumn() {
		return 'first_name';
	}

	public function rules() {
		return array(
			array('first_name, last_name, email, current_position, archived_position, office_id, firm_id', 'required'),
			array('current_position, archived_position', 'numerical', 'integerOnly'=>true),
			array('first_name, last_name, phone_office, phone_home, phone_mobile, fax, skype', 'length', 'max'=>50),
			array('email, position', 'length', 'max'=>100),
			array('phone_office_ext', 'length', 'max'=>20),
			array('office_id, firm_id', 'length', 'max'=>10),
			array('personal_note', 'safe'),
			array('phone_office, phone_office_ext, phone_home, phone_mobile, fax, position, skype, personal_note', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, first_name, last_name, email, phone_office, phone_office_ext, phone_home, phone_mobile, fax, position, current_position, archived_position, skype, personal_note, office_id, firm_id', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'office' => array(self::BELONGS_TO, 'Office', 'office_id'),
			'employeescontinents' => array(self::HAS_MANY, 'Employeescontinent', 'employees_id'),
			'employeesregions' => array(self::HAS_MANY, 'Employeesregion', 'employees_id'),
			'employeessectors' => array(self::HAS_MANY, 'Employeessector', 'employees_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'first_name' => Yii::t('app', 'First Name'),
			'last_name' => Yii::t('app', 'Last Name'),
			'email' => Yii::t('app', 'Email'),
			'phone_office' => Yii::t('app', 'Phone Office'),
			'phone_office_ext' => Yii::t('app', 'Phone Office Ext'),
			'phone_home' => Yii::t('app', 'Phone Home'),
			'phone_mobile' => Yii::t('app', 'Phone Mobile'),
			'fax' => Yii::t('app', 'Fax'),
			'position' => Yii::t('app', 'Position'),
			'current_position' => Yii::t('app', 'Current Position'),
			'archived_position' => Yii::t('app', 'Archived Position'),
			'skype' => Yii::t('app', 'Skype'),
			'personal_note' => Yii::t('app', 'Personal Note'),
			'office_id' => null,
			'firm_id' => Yii::t('app', 'Firm'),
			'office' => null,
			'employeescontinents' => null,
			'employeesregions' => null,
			'employeessectors' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id, true);
		$criteria->compare('first_name', $this->first_name, true);
		$criteria->compare('last_name', $this->last_name, true);
		$criteria->compare('email', $this->email, true);
		$criteria->compare('phone_office', $this->phone_office, true);
		$criteria->compare('phone_office_ext', $this->phone_office_ext, true);
		$criteria->compare('phone_home', $this->phone_home, true);
		$criteria->compare('phone_mobile', $this->phone_mobile, true);
		$criteria->compare('fax', $this->fax, true);
		$criteria->compare('position', $this->position, true);
		$criteria->compare('current_position', $this->current_position);
		$criteria->compare('archived_position', $this->archived_position);
		$criteria->compare('skype', $this->skype, true);
		$criteria->compare('personal_note', $this->personal_note, true);
		$criteria->compare('office_id', $this->office_id);
		$criteria->compare('firm_id', $this->firm_id, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}