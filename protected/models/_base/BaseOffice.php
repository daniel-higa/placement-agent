<?php

/**
 * This is the model base class for the table "office".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Office".
 *
 * Columns in table "office" available as properties of the model,
 * followed by relations of table "office" available as properties of the model.
 *
 * @property string $id
 * @property string $name
 * @property string $country_id
 * @property integer $main_office
 * @property string $phone
 * @property string $address
 * @property string $city
 * @property string $state
 * @property string $description
 * @property integer $sync_gmaps
 * @property string $firm_id
 *
 * @property Employees[] $employees
 * @property Country $country
 * @property Firm $firm
 * @property Officecontinent[] $officecontinents
 * @property Officeregion[] $officeregions
 */
abstract class BaseOffice extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'office';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Office|Offices', $n);
	}

	public static function representingColumn() {
		return 'id';
	}

	public function rules() {
		return array(
			array('name, country_id, main_office, phone, streetname, streetnumber, city, firm_id', 'required'),
			array('main_office, sync_gmaps', 'numerical', 'integerOnly'=>true),
			array('name, phone', 'length', 'max'=>50),
			array('country_id, firm_id', 'length', 'max'=>10),
			array('streetname, streetnumber, city, state, floor, building', 'length', 'max'=>100),
			array('description', 'safe'),
			array('description', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, name, country_id, main_office, phone, address, city, state, description, sync_gmaps, firm_id', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'employees' => array(self::HAS_MANY, 'Employees', 'office_id'),
			'country' => array(self::BELONGS_TO, 'Country', 'country_id'),
			'firm' => array(self::BELONGS_TO, 'Firm', 'firm_id'),
			'officecontinents' => array(self::HAS_MANY, 'Officecontinent', 'office_id'),
			'officeregions' => array(self::HAS_MANY, 'Officeregion', 'office_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'name' => Yii::t('app', 'Name'),
			'country_id' => null,
			'main_office' => Yii::t('app', 'Main Office'),
			'phone' => Yii::t('app', 'Phone'),
			'address' => Yii::t('app', 'Address'),
			'city' => Yii::t('app', 'City'),
			'state' => Yii::t('app', 'State'),
			'description' => Yii::t('app', 'Description'),
			'sync_gmaps' => Yii::t('app', 'Sync Gmaps'),
			'firm_id' => Yii::t('app', 'Firm'),
            'streetname' => Yii::t('app', 'Street name'),
            'streetnumber' => Yii::t('app', 'street number'),
            'floor' => Yii::t('app', 'Floor'),
            'building' => Yii::t('app', 'Building'),
			'employees' => null,
			'country' => null,
			'firm' => null,
			'officecontinents' => null,
			'officeregions' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id, true);
		$criteria->compare('country_id', $this->country_id);
		$criteria->compare('main_office', $this->main_office);
		$criteria->compare('phone', $this->phone, true);
		$criteria->compare('streetname', $this->streetname, true);
        $criteria->compare('streetnumber', $this->streetnumber, false);
        $criteria->compare('floor', $this->floor, false);
        $criteria->compare('building', $this->building, false);
		$criteria->compare('city', $this->city, true);
		$criteria->compare('state', $this->state, true);
		$criteria->compare('description', $this->description, true);
		$criteria->compare('sync_gmaps', $this->sync_gmaps);
		$criteria->compare('firm_id', $this->firm_id);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}
